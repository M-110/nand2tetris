// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // A Instruction if instruction starts with 0
    // 15--14..0
    // 0    v
    // 0: A instruction digit
    // v: 15 bit value

    // C Instruction if instruction starts with 1
    // 15..13--12..6---5..3--2..0
    // 111    acccccc   ddd  jjj
    //
    // 111: C instruction digits
    // acccccc: computational instruction
    //      a = M
    //      c1 = zx
    //      c2 = nx
    //      c3 = zy
    //      c4 = ny
    //      c5 = f
    //      c6 = no
    // ddd: destination instruction
    //      d1 = A
    //      d2 = D
    //      d3 = M 
    // jjj: jump instruction
    //      j1 = ng
    //      j2 = zr
    //      j3 = greater than zero

    // If first digit is 1, then it is a C instruction
    Not(in=instruction[15], out=instructionA);
    Not(in=instructionA, out=instructionC);

////////////////// Register A
    // instruction[5] represents whether A is the destination
    And(a=instructionC, b=instruction[5], out=ALUtoA); 

    // If it's a C instruction and the destination is A, then send the ALU output to A register
    // Otherwise send the instruction to register A
    Mux16(a=instruction, b=ALUout, sel=ALUtoA, out=inRegisterA);

    // loadA if it is an A instruction or the C instruction has an A destination
    Or(a=instructionA, b=ALUtoA, out=loadA);
    ARegister(in=inRegisterA, load=loadA, out=outRegisterA, out[0..14]=addressM, out=AtoPC); // addressM -->

    // instruction[12] being 1 signals that M should be used as opposed to the A register
    Mux16(a=outRegisterA, b=inM, sel=instruction[12], out=outMuxAM);

////////////////// Register D
    // instruction[4] signals the destination as D register if it is a C instruction
    And(a=instructionC, b=instruction[4], out=loadD);
    DRegister(in=ALUout, load=loadD, out=outRegisterD);

////////////////// ALU
    ALU(x=outRegisterD, y=outMuxAM,
    zx=instruction[11], 
    nx=instruction[10], 
    zy=instruction[9], 
    ny=instruction[8], 
    f=instruction[7], 
    no=instruction[6],
    out=ALUout, out=outM, // outM -->
    zr=outZR,
    ng=outNG);


    // If it is a C instruction and the desination is M
    And(a=instructionC, b=instruction[3], out=writeM); // writeM -->

////////////////// PC / JUMP conditionals   
    // Jump if equal to zero
    And(a=outZR, b=instruction[1], out=JEQ); // JEQ
    // Jump if less than zero
    And(a=outNG, b=instruction[2], out=JLT); // JLT
    
    // Zero or Negative
    Or(a=outZR, b=outNG, out=ZRorNG);
    // Positive
    Not(in=ZRorNG, out=positive);

    // Jump if greater than zero
    And(a=positive, b=instruction[0], out=JGT); // JGT
    // Jump if less than or equal to zero
    Or(a=JEQ, b=JLT, out=JLE); // JLE
    // If any conditions are met, ready the jump to A
    // (less than or equal to and greater than cover all possible conditions
    // so if either is true, there must be a jump of some kind)
    Or(a=JLE, b=JGT, out=jumpToA);

    // Only jump if this is a C instruction though!
    And(a=instructionC, b=jumpToA, out=loadPC);
    // If not loading an address, increase the PC
    Not(in=loadPC, out=incPC);

    // If any conditions were met then the PC will load the address.
    // Otherwise the PC will just increase the address to the next line.
    PC(in=AtoPC, load=loadPC, inc=incPC, reset=reset, out[0..14]=pc); // pc -->

}